import { ShippingExtensibilityMainContext } from "./main";
import { RateRequest } from "@kibocommerce/rest-sdk/clients/ShippingStorefront";
import { CancelLabelRequest, CancelLabelResponse, CarrierRatesResponse, ManifestRequest, ManifestResponse, ShipmentRequest, ShipmentResponse } from "./types";
import { RETURN_LABEL_IMG_DATA, RETURN_TRACKING_NUMBER, SHIPMENT_LABEL_IMG_DATA, SHIPMENT_TRACKING_NUMBER } from "./testFedexLabels";

/**
 * Get Shipping Rates for a given order
 */
export const getRates = async (context: ShippingExtensibilityMainContext, request: RateRequest): Promise<CarrierRatesResponse> => {

  return {
    carrierId: context.carrierId,
    shippingRates: [
      {
        code: context.carrierId + '_Standard',
        amount: 1.23,
        //daysInTransit: 5, // not used it seems
        shippingItemRates: [],
        customAttributes: [],
        //messages: [], // not used it seems. errors only?
        //data: {} // data bag
      },
      {
        code: context.carrierId + '_3_Day',
        amount: 4.56,
        //daysInTransit: 3, // not used it seems
        shippingItemRates: [],
        customAttributes: [],
        //messages: [], // not used it seems. errors only?
        //data: {} // data bag
      },
      {
        code: context.carrierId + '_2_Day',
        amount: 7.89,
        //daysInTransit: 2, // not used it seems
        shippingItemRates: [],
        customAttributes: [],
        //messages: [], // not used it seems. errors only?
        //data: {} // data bag
      },
      {
        code: context.carrierId + '_1_Day',
        amount: 10.77,
        //daysInTransit: 1, // not used it seems
        shippingItemRates: [],
        customAttributes: [],
        //messages: [], // not used it seems. errors only?
        //data: {} // data bag
      }
    ],
    customAttributes: [
      // Made up test data
      {
        childAttributes: [
          {
            childAttributes: [],
            key: 'test_child1',
            value: '1'
          },
          {
            childAttributes: [],
            key: 'test_child2',
            value: '2'
          },
          {
            childAttributes: [
              {
                childAttributes: [],
                key: 'test_nested_child',
                value: 'foo'
              }
            ],
            key: 'test_child3'
          }
        ],
        key: 'test'
      },
      {
        childAttributes: [],
        key: 'total_billing_weight',
        value: '1.0'
      }
    ]
  }
}



export const getLabels = async (context: ShippingExtensibilityMainContext, request: ShipmentRequest): Promise<ShipmentResponse> => {

  const response: ShipmentResponse = {
    shippingTotal: {
      currencyCode: 'USD',
      value: 9.99
    },
    trackingNumber: SHIPMENT_TRACKING_NUMBER,
    packageResponses: [{
      id: '1',
      trackingNumber: SHIPMENT_TRACKING_NUMBER,
      label: {
        imageFormat: 'PNG',
        imageData: SHIPMENT_LABEL_IMG_DATA,
        labelUrl: null // Generated by Shipping Runtime
      },
      customAttributes: []
    }],
    customAttributes: [
      // Reflect order/shipment info back out
      {
        childAttributes: [
          {
            childAttributes: [],
            key: 'related_order_id',
            value: request.relatedOrderId
          },
          {
            childAttributes: [],
            key: 'related_order_number',
            value: String(request.relatedOrderNumber)
          },
          {
            childAttributes: [],
            key: 'related_shipment_number',
            value: String(request.relatedShipmentNumber)
          }
        ],
        key: 'related_info'
      },
      // Copied from Fedex as an example
      {
        childAttributes: [
          {
            childAttributes: [],
            key: 'base_charge',
            value: '9.5'
          },
          {
            childAttributes: [],
            key: 'total_surcharges',
            value: '0.49'
          },
          {
            childAttributes: [
              {
                childAttributes: [],
                key: 'FUEL',
                value: '0.49'
              }
            ],
            key: 'surcharges'
          }
        ],
        key: 'package_rate_details'
      },
      {
        childAttributes: [],
        key: 'total_billing_weight',
        value: '1.0'
      }
    ],
    messages: [
      // Normally only returned on error
      {
        source: 'foo',
        message: 'bar',
        code: 'wtf'
      }
    ],
    isSuccessful: true
  };

  // 'Shipment' or 'Return' types differ slightly
  if (request.shipmentRequestType === 'Return') {
    // Change tracking number and label image
    response.trackingNumber = RETURN_TRACKING_NUMBER;
    response.packageResponses[0].trackingNumber = RETURN_TRACKING_NUMBER;
    response.packageResponses[0].label.imageData = RETURN_LABEL_IMG_DATA;

    // Strip some fields not normally returned
    response.customAttributes = [];
  }

  return response;

}

export const getManifest = async (context: ShippingExtensibilityMainContext, request: ManifestRequest): Promise<ManifestResponse> => {
  return {
    manifestId: '1234',
    manifestUrl: 'https://example.com/manifest/1234',
    carrierId: context.carrierId,
    locationCode: request.locationCode,
    includedShipments: request.includedShipments, // Just copy the list back
    messages: [
      {
        source: 'foo',
        message: 'bar',
        code: 'wtf'
      }
    ],
    isSuccessful: true
  };

}

export const getManifestUrl = async (context: ShippingExtensibilityMainContext, request: string): Promise<string> => {
  const manifestId = request;
  return `https://example.com/manifest/${manifestId}`;
}


export const cancelLabels = async (context: ShippingExtensibilityMainContext, request: CancelLabelRequest): Promise<CancelLabelResponse> => {
  // TODO: Loop over and process these IDs
  const integratorIds = request.integratorIds;

  return {
    labelStatus: [
      {
        integratorId: '1000a',
        refundStatus: 'Refunded' // Integration dependent so using a mock value
      },
      {
        integratorId: '1000b',
        refundStatus: 'Failed' // Integration dependent so using a mock value
      }
    ],
    messages: [
      {
        source: 'foo',
        message: 'bar',
        code: 'wtf'
      }
    ],
    isSuccessful: true
  };
}
